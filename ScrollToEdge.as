package {	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.geom.Rectangle;	import flash.geom.Matrix;	import flash.geom.Point;	public class ScrollToEdge extends MovieClip	{		//Velocity and direction		var vx:int;		var vy:int;		var speed:uint;				//Camera Trap		var rightInnerBoundary:uint;		var leftInnerBoundary:uint;		var topInnerBoundary:uint;		var bottomInnerBoundary:uint;				//Player bitmap				public var player:Player = new Player();		var playerDown:PlayerDown = new PlayerDown();		var playerRight:PlayerRight = new PlayerRight();		var playerLeft:PlayerLeft = new PlayerLeft();		var playerBounds:Rectangle;// = player.getBounds(player);		var playerBitmapData:BitmapData;// = new BitmapData(player.width, player.height, true, 0);		var playerBmp:Bitmap;// = new Bitmap(playerBitmapData);		var playerOrientation:String;				//Fish bitmap		public var fish:Fish = new Fish();		var fishBounds:Rectangle = fish.getBounds(fish);		var fishBitmapData:BitmapData = new BitmapData(fish.width, fish.height, true, 0);		var fishBmp:Bitmap = new Bitmap(fishBitmapData);		var playerHasFish:Boolean = false;				//Labyrinth bitmap		private var labyrinth:MovieClip = new Labyrinth();		var bounds:Rectangle = labyrinth.getBounds(labyrinth);		var labyrinthBitmapData:BitmapData = new BitmapData(labyrinth.width,labyrinth.height,true,0);		var labyrinthBmp:Bitmap = new Bitmap(labyrinthBitmapData);				var point:Sprite = new Sprite();		function ScrollToEdge()		{			init();		}		function init():void		{			//initialize variables			vx = 0;			vy = 0;			speed = 5;			rightInnerBoundary = (stage.stageWidth / 2) + (stage.stageWidth / 8);			leftInnerBoundary = (stage.stageWidth / 2) - (stage.stageWidth / 8);			topInnerBoundary = (stage.stageHeight / 2) - (stage.stageHeight / 8);			bottomInnerBoundary = (stage.stageHeight / 2) + (stage.stageHeight / 8);						drawLabyrinth();			//drawPlayer('top');			initPlayer();			//initFish();			initListeners();		}				function drawLabyrinth():void		{			labyrinthBitmapData.draw(labyrinth, new Matrix(1, 0, 0, 1, -bounds.left, -bounds.top));			stage.addChild(labyrinthBmp);			labyrinthBmp.x = 270;			labyrinthBmp.y = 10;		}				function initFish():void		{			fishBitmapData.draw(fish, new Matrix(1, 0, 0, 1, -fishBounds.left, -fishBounds.top));			stage.addChild(fishBmp);			fishBmp.x = stage.stageWidth / 2;			fishBmp.y = stage.stageHeight / 2;		}				function initPlayer():void		{			playerBounds = player.getBounds(player);			playerBitmapData = new BitmapData(player.width, player.height, true, 0);			playerBmp = new Bitmap(playerBitmapData);			playerBitmapData.draw(player, new Matrix(1, 0, 0, 1, -playerBounds.left, -playerBounds.top));						stage.addChild(playerBmp);			playerBmp.x = stage.stageWidth / 2;			playerBmp.y = stage.stageHeight / 2 - player.height / 2;					}				function drawPlayer(playerOrientation:String):void		{			if(playerBmp.parent != null)			{				stage.removeChild(playerBmp);			}			if (playerOrientation == 'top')			{				playerBounds = player.getBounds(player);				playerBitmapData = new BitmapData(player.width, player.height, true, 0);				playerBmp = new Bitmap(playerBitmapData);				playerBitmapData.draw(player, new Matrix(1, 0, 0, 1, -playerBounds.left, -playerBounds.top));			}			else if (playerOrientation == 'right')			{				playerBounds = playerRight.getBounds(playerRight);				playerBitmapData = new BitmapData(playerRight.width, playerRight.height, true, 0);				playerBmp = new Bitmap(playerBitmapData);				playerBitmapData.draw(player, new Matrix(1, 0, 0, 1, -playerBounds.left, -playerBounds.top));			}			else if (playerOrientation == 'down')			{				playerBounds = playerDown.getBounds(playerDown);				playerBitmapData = new BitmapData(playerDown.width, playerDown.height, true, 0);				playerBmp = new Bitmap(playerBitmapData);				playerBitmapData.draw(player, new Matrix(1, 0, 0, 1, -playerBounds.left, -playerBounds.top));			}			else if (playerOrientation == 'left')			{				playerBounds = playerLeft.getBounds(playerLeft);				playerBitmapData = new BitmapData(playerLeft.width, playerLeft.height, true, 0);				playerBmp = new Bitmap(playerBitmapData);				playerBitmapData.draw(player, new Matrix(1, 0, 0, 1, -playerBounds.left, -playerBounds.top));			}			stage.addChild(playerBmp);			playerBmp.x = stage.stageWidth / 2;			playerBmp.y = stage.stageHeight / 2 - player.height / 2;		}				function initListeners():void		{			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);			addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				function drawPoint(xPos:int, yPos:int):void		{			point.graphics.lineStyle(1);			point.graphics.beginFill(0x000000);			point.graphics.drawCircle(xPos, yPos, 1);			stage.addChild(point);			point.graphics.endFill();		}				function keyDownHandler(event:KeyboardEvent):void		{			if (event.keyCode == Keyboard.LEFT)			{				//playerOrientation = 'left';				vx =  -speed;			}			else if (event.keyCode == Keyboard.RIGHT)			{				//playerOrientation = 'right';				vx = speed;			}			else if (event.keyCode == Keyboard.UP)			{				//playerOrientation = 'up';				vy =  -speed;			}			else if (event.keyCode == Keyboard.DOWN)			{				//playerOrientation = 'down';				vy = speed;			}			//checkForFish(event);		}				function keyUpHandler(event:KeyboardEvent):void		{			if (event.keyCode == Keyboard.LEFT || event.keyCode == Keyboard.RIGHT)			{				vx = 0;			}			else if (event.keyCode == Keyboard.DOWN || event.keyCode == Keyboard.UP)			{				vy = 0;			}		}				function enterFrameHandler(event:Event):void		{			//Initialise local variables			var playerHalfWidth:uint = playerBmp.width / 2;			var playerHalfHeight:uint = playerBmp.height / 2;			var backgroundHalfWidth:uint = background.width / 2;			var backgroundHalfHeight:uint = background.height / 2;						/*---------------GAME LOOP FUNCTIONS--------------------*/			//drawPlayer(playerOrientation);			movePlayer();			stopPlayer(playerHalfWidth);			stopBackground(backgroundHalfWidth, backgroundHalfHeight);					}				function movePlayer():void		{			//Collision			if (labyrinthBitmapData.hitTest(new Point(labyrinthBmp.x,labyrinthBmp.y),255,											playerBitmapData,new Point(playerBmp.x,playerBmp.y),255))			{				playerBmp.x += -2*vx;				playerBmp.y += -2*vy;				}						else			{				playerBmp.x +=  vx;				playerBmp.y +=  vy;			}		}				function checkForFish(event:KeyboardEvent):void		{			if (event.keyCode == Keyboard.SPACE && fishBitmapData.hitTest(new Point(fishBmp.x, fishBmp.y), 255,																		  fishBitmapData, new Point(playerBmp.x,																									playerBmp.y), 255))			{				if (! playerHasFish)				{					player.addChild(fishBmp);					fishBmp.x = 0;					fishBmp.y = 0;					playerHasFish = true;				}				else				{					stage.addChild(fishBmp);					fishBmp.x = fishBmp.x;					fishBmp.y = fishBmp.y;					playerHasFish = false;				}			}		}				function stopPlayer(playerHalfWidth:uint):void		{			//Player has reached beyond left inner trap			if (playerBmp.x - playerHalfWidth < leftInnerBoundary)			{				playerBmp.x = leftInnerBoundary + playerHalfWidth;				rightInnerBoundary = (stage.stageWidth / 2) + (stage.stageWidth / 8);				background.x -=  vx;				labyrinthBmp.x -=  vx;			}			//Player has reached right inner trap			else if (playerBmp.x + playerHalfWidth > rightInnerBoundary)			{				playerBmp.x = rightInnerBoundary - playerHalfWidth;				leftInnerBoundary = (stage.stageWidth / 2) - (stage.stageWidth / 8);				background.x -=  vx;				labyrinthBmp.x -=  vx;			}						//Player has reached top inner trap			if (playerBmp.y < topInnerBoundary)			{				playerBmp.y = topInnerBoundary;				bottomInnerBoundary = (stage.stageHeight / 2) + (stage.stageHeight / 8);				background.y -=  vy;				labyrinthBmp.y -=  vy;			}			//Player has reached bottom inner trap			else if (playerBmp.y + playerBmp.height > bottomInnerBoundary)			{				playerBmp.y = bottomInnerBoundary - playerBmp.height;				topInnerBoundary = (stage.stageHeight / 2) - (stage.stageHeight / 8);				background.y -=  vy;				labyrinthBmp.y -=  vy;			}		}				function stopBackground(backgroundHalfWidth:uint, backgroundHalfHeight:uint):void		{			//Background has reached right end of stage			if (background.x + backgroundHalfWidth < stage.stageWidth)			{				background.x = stage.stageWidth - backgroundHalfWidth;				rightInnerBoundary = stage.stageWidth;			}			//Background has reached left end of stage			else if (background.x - backgroundHalfWidth > 0)			{				background.x = 0 + backgroundHalfWidth;				leftInnerBoundary = 0;			}						//Background has reached top edge of stage			if (background.y - backgroundHalfHeight > 0)			{				background.y = 0 + backgroundHalfHeight;				topInnerBoundary = 0;			}			//Background has reached bottom edge of stage			else if (background.y + backgroundHalfHeight < stage.stageHeight)			{				background.y = stage.stageHeight - backgroundHalfHeight;				bottomInnerBoundary = stage.stageHeight;			}		}	}}